/* --- Updated AdminDashboard.jsx --- */
import { useEffect, useState } from "react";
import { db } from "../firebase/config";
import { collection, getDocs } from "firebase/firestore";

const AdminDashboard = () => {
  const [stats, setStats] = useState({ teachers: 0, students: 0 });

  useEffect(() => {
    const fetchStats = async () => {
      const snapshot = await getDocs(collection(db, "users"));
      const users = snapshot.docs.map(doc => doc.data());
      const teachers = users.filter(user => user.role === "teacher").length;
      const students = users.filter(user => user.role === "student").length;
      setStats({ teachers, students });
    };
    fetchStats();
  }, []);

  return (
    <div>
      <h1 className="text-2xl font-bold">Admin Dashboard</h1>
      <p>Total Teachers: {stats.teachers}</p>
      <p>Total Students: {stats.students}</p>
    </div>
  );
};

export default AdminDashboard;


/* --- Updated StudentDashboard.jsx --- */
import { useEffect, useState } from "react";
import { db } from "../firebase/config";
import { collection, getDocs } from "firebase/firestore";
import { useAuth } from "../context/AuthContext";

const StudentDashboard = () => {
  const [appointments, setAppointments] = useState([]);
  const { currentUser } = useAuth();

  useEffect(() => {
    const fetchAppointments = async () => {
      const snapshot = await getDocs(collection(db, "appointments"));
      const myAppointments = snapshot.docs
        .map(doc => doc.data())
        .filter(app => app.studentId === currentUser.uid);
      setAppointments(myAppointments);
    };
    fetchAppointments();
  }, [currentUser]);

  return (
    <div>
      <h1 className="text-2xl font-bold">Student Dashboard</h1>
      <h2 className="text-lg">My Appointments</h2>
      <ul>
        {appointments.map((a, i) => (
          <li key={i}>Date: {a.date} | Status: {a.status}</li>
        ))}
      </ul>
    </div>
  );
};

export default StudentDashboard;


/* --- Updated TeacherDashboard.jsx --- */
import { useEffect, useState } from "react";
import { db } from "../firebase/config";
import { collection, getDocs } from "firebase/firestore";
import { useAuth } from "../context/AuthContext";

const TeacherDashboard = () => {
  const [appointments, setAppointments] = useState([]);
  const { currentUser } = useAuth();

  useEffect(() => {
    const fetchAppointments = async () => {
      const snapshot = await getDocs(collection(db, "appointments"));
      const teacherAppointments = snapshot.docs
        .map(doc => doc.data())
        .filter(app => app.teacherId === currentUser.uid);
      setAppointments(teacherAppointments);
    };
    fetchAppointments();
  }, [currentUser]);

  return (
    <div>
      <h1 className="text-2xl font-bold">Teacher Dashboard</h1>
      <h2 className="text-lg">Scheduled Appointments</h2>
      <ul>
        {appointments.map((a, i) => (
          <li key={i}>Date: {a.date} | Status: {a.status}</li>
        ))}
      </ul>
    </div>
  );
};

export default TeacherDashboard;

/* --- Updated BookAppointment.jsx --- */
import { useState, useEffect } from "react";
import { db } from "../../firebase/config";
import { collection, addDoc, getDocs } from "firebase/firestore";
import { useAuth } from "../../context/AuthContext";

const BookAppointment = () => {
  const [teachers, setTeachers] = useState([]);
  const [teacherId, setTeacherId] = useState("");
  const [date, setDate] = useState("");
  const { currentUser } = useAuth();

  useEffect(() => {
    const fetchTeachers = async () => {
      const snapshot = await getDocs(collection(db, "users"));
      const teacherList = snapshot.docs
        .map(doc => doc.data())
        .filter(user => user.role === "teacher");
      setTeachers(teacherList);
    };
    fetchTeachers();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!teacherId || !date) return alert("All fields required");

    await addDoc(collection(db, "appointments"), {
      studentId: currentUser.uid,
      teacherId,
      date,
      status: "pending",
    });

    alert("Appointment booked!");
    setTeacherId("");
    setDate("");
  };

  return (
    <form onSubmit={handleSubmit}>
      <h2 className="text-xl font-semibold">Book an Appointment</h2>

      <select value={teacherId} onChange={(e) => setTeacherId(e.target.value)} required>
        <option value="">Select Teacher</option>
        {teachers.map((teacher) => (
          <option key={teacher.uid} value={teacher.uid}>
            {teacher.email}
          </option>
        ))}
      </select>

      <input
        type="datetime-local"
        value={date}
        onChange={(e) => setDate(e.target.value)}
        required
      />

      <button type="submit">Book</button>
    </form>
  );
};

export default BookAppointment;


/* --- Updated MessageTeacher.jsx --- */
import { useState, useEffect } from "react";
import { collection, addDoc, getDocs } from "firebase/firestore";
import { db } from "../../firebase/config";
import { useAuth } from "../../context/AuthContext";

const MessageTeacher = () => {
  const [teachers, setTeachers] = useState([]);
  const [teacherId, setTeacherId] = useState("");
  const [message, setMessage] = useState("");
  const { currentUser } = useAuth();

  useEffect(() => {
    const fetchTeachers = async () => {
      const snapshot = await getDocs(collection(db, "users"));
      const teacherList = snapshot.docs
        .map(doc => doc.data())
        .filter(user => user.role === "teacher");
      setTeachers(teacherList);
    };
    fetchTeachers();
  }, []);

  const handleSend = async (e) => {
    e.preventDefault();
    if (!teacherId || !message) return alert("Please complete the form");

    await addDoc(collection(db, "messages"), {
      from: currentUser.uid,
      to: teacherId,
      message,
      timestamp: new Date().toISOString(),
    });

    alert("Message sent!");
    setMessage("");
    setTeacherId("");
  };

  return (
    <form onSubmit={handleSend}>
      <h2 className="text-xl font-semibold">Message a Teacher</h2>

      <select value={teacherId} onChange={(e) => setTeacherId(e.target.value)} required>
        <option value="">Select Teacher</option>
        {teachers.map((teacher) => (
          <option key={teacher.uid} value={teacher.uid}>
            {teacher.email}
          </option>
        ))}
      </select>

      <textarea
        placeholder="Write your message..."
        value={message}
        onChange={(e) => setMessage(e.target.value)}
        required
      ></textarea>

      <button type="submit">Send Message</button>
    </form>
  );
};

export default MessageTeacher;


/* --- Updated ViewAppointments.jsx --- */
import { useEffect, useState } from "react";
import { db } from "../../firebase/config";
import { collection, getDocs } from "firebase/firestore";
import { useAuth } from "../../context/AuthContext";

const ViewAppointments = () => {
  const [appointments, setAppointments] = useState([]);
  const { currentUser } = useAuth();

  useEffect(() => {
    const fetchAppointments = async () => {
      const snapshot = await getDocs(collection(db, "appointments"));
      const filtered = snapshot.docs
        .map(doc => doc.data())
        .filter(item => item.teacherId === currentUser.uid);
      setAppointments(filtered);
    };
    fetchAppointments();
  }, [currentUser]);

  return (
    <div>
      <h2>Upcoming Appointments</h2>
      <ul>
        {appointments.map((a, i) => (
          <li key={i}>Date: {a.date} | Status: {a.status}</li>
        ))}
      </ul>
    </div>
  );
};

export default ViewAppointments;


/* --- Updated ViewMessages.jsx --- */
import { useEffect, useState } from "react";
import { db } from "../../firebase/config";
import { collection, getDocs } from "firebase/firestore";
import { useAuth } from "../../context/AuthContext";

const ViewMessages = () => {
  const [messages, setMessages] = useState([]);
  const { currentUser } = useAuth();

  useEffect(() => {
    const fetchMessages = async () => {
      const snapshot = await getDocs(collection(db, "messages"));
      const filtered = snapshot.docs
        .map(doc => doc.data())
        .filter(msg => msg.to === currentUser.uid);
      setMessages(filtered);
    };
    fetchMessages();
  }, [currentUser]);

  return (
    <div>
      <h2>Messages from Students</h2>
      <ul>
        {messages.map((m, i) => (
          <li key={i}>{m.message}</li>
        ))}
      </ul>
    </div>
  );
};

export default ViewMessages;


/* --- Updated AddTeacher.jsx --- */
import { useState } from "react";
import { db } from "../../firebase/config";
import { collection, addDoc } from "firebase/firestore";

const AddTeacher = () => {
  const [email, setEmail] = useState("");
  const [name, setName] = useState("");

  const handleAddTeacher = async (e) => {
    e.preventDefault();
    if (!email || !name) return alert("All fields are required");

    await addDoc(collection(db, "users"), {
      email,
      name,
      role: "teacher",
    });

    alert("Teacher added!");
    setEmail("");
    setName("");
  };

  return (
    <form onSubmit={handleAddTeacher}>
      <h2 className="text-xl font-semibold">Add Teacher</h2>
      <input
        type="text"
        placeholder="Name"
        value={name}
        onChange={(e) => setName(e.target.value)}
        required
      />
      <input
        type="email"
        placeholder="Email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        required
      />
      <button type="submit">Add Teacher</button>
    </form>
  );
};

export default AddTeacher;


/* --- Updated ManageUsers.jsx --- */
import { useEffect, useState } from "react";
import { db } from "../../firebase/config";
import { collection, getDocs } from "firebase/firestore";

const ManageUsers = () => {
  const [users, setUsers] = useState([]);

  useEffect(() => {
    const fetchUsers = async () => {
      const snapshot = await getDocs(collection(db, "users"));
      const userList = snapshot.docs.map(doc => doc.data());
      setUsers(userList);
    };
    fetchUsers();
  }, []);

  return (
    <div>
      <h2>User Management</h2>
      <ul>
        {users.map((user, i) => (
          <li key={i}>{user.name || user.email} - {user.role}</li>
        ))}
      </ul>
    </div>
  );
};

export default ManageUsers;




npm install firebase

// Import the functions you need from the SDKs you need
import { initializeApp } from "firebase/app";
import { getAnalytics } from "firebase/analytics";
// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries

// Your web app's Firebase configuration
// For Firebase JS SDK v7.20.0 and later, measurementId is optional
const firebaseConfig = {
  apiKey: "AIzaSyCQOx-Q8rLcZg7292O1Uk0--1VUJgH0ark",
  authDomain: "student-teacher-b.firebaseapp.com",
  projectId: "student-teacher-b",
  storageBucket: "student-teacher-b.firebasestorage.app",
  messagingSenderId: "254556696986",
  appId: "1:254556696986:web:527bd193e6b5cd40a64a23",
  measurementId: "G-LR33DKJNCD"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const analytics = getAnalytics(app);